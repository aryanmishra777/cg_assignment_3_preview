#include "mesh.h"
#include <glm/gtc/type_ptr.hpp>
#include <iostream>
#include <fstream>;
#include <sstream>
void main() {
// External variables from main.cpp
extern float camera_pos[3];extern glm::vec3 camera_front;extern glm::vec3 camera_up;extern int window_width;extern int window_height;// Shader source pathsconst char* vertexShaderPath = "shaders/basic.vert";const char* fragmentShaderPath = "shaders/basic.frag";// Utility function to read shader sourcestd::string readFile(const std::string& filePath) {    std::ifstream file(filePath);    if (!file.is_open()) {        std::cerr << "Could not open file: " << filePath << std::endl;        return "";    }        std::stringstream buffer;    buffer << file.rdbuf();    return buffer.str();}Mesh::Mesh(OffModel* model) {    // Initialize transform    position = glm::vec3(0.0f);    rotation = glm::vec3(0.0f);    scale = glm::vec3(1.0f);        // Calculate bounding box    glm::vec3 min_bounds(std::numeric_limits<float>::max());    glm::vec3 max_bounds(std::numeric_limits<float>::lowest());        // Convert OffModel to internal representation    vertices.resize(model->numberOfVertices);    for (int i = 0; i < model->numberOfVertices; i++) {        // Convert position from separate x,y,z to glm::vec3        vertices[i].position = glm::vec3(            model->vertices[i].x,            model->vertices[i].y,            model->vertices[i].z        );                // Update bounding box        min_bounds.x = std::min(min_bounds.x, vertices[i].position.x);        min_bounds.y = std::min(min_bounds.y, vertices[i].position.y);        min_bounds.z = std::min(min_bounds.z, vertices[i].position.z);                max_bounds.x = std::max(max_bounds.x, vertices[i].position.x);        max_bounds.y = std::max(max_bounds.y, vertices[i].position.y);        max_bounds.z = std::max(max_bounds.z, vertices[i].position.z);                // Convert normal from Vector3f to glm::vec3        vertices[i].normal = glm::vec3(            model->vertices[i].normal.x,            model->vertices[i].normal.y,            model->vertices[i].normal.z        );    }        // Calculate center and size of the model    glm::vec3 center = (min_bounds + max_bounds) * 0.5f;    glm::vec3 size = max_bounds - min_bounds;    float max_dimension = std::max(std::max(size.x, size.y), size.z);        // Center and normalize the model    float scale_factor = 2.0f / max_dimension; // Scale to fit in a 2x2x2 box    for (auto& vertex : vertices) {        // Center the model        vertex.position -= center;                // Scale to normalized size        vertex.position *= scale_factor;    }        // Process polygons - convert to triangles if necessary    for (int i = 0; i < model->numberOfPolygons; i++) {        if (model->polygons[i].noSides >= 3) {            // Triangulate polygon if it has more than 3 sides            for (int j = 0; j < model->polygons[i].noSides - 2; j++) {                // Add indices for triangle                indices.push_back(model->polygons[i].v[0]);                indices.push_back(model->polygons[i].v[j + 1]);                indices.push_back(model->polygons[i].v[j + 2]);                                // Create triangle for ray tracing and slicing                Triangle tri;                tri.v0 = vertices[model->polygons[i].v[0]];                tri.v1 = vertices[model->polygons[i].v[j + 1]];                tri.v2 = vertices[model->polygons[i].v[j + 2]];                                // Calculate triangle normal and centroid                glm::vec3 edge1 = tri.v1.position - tri.v0.position;                glm::vec3 edge2 = tri.v2.position - tri.v0.position;                tri.normal = glm::normalize(glm::cross(edge1, edge2));                                tri.centroid = (tri.v0.position + tri.v1.position + tri.v2.position) / 3.0f;                                triangles.push_back(tri);            }        }    }        // Setup OpenGL objects    setupMesh();    setupShaders();        // Set initial model matrix    updateModelMatrix();}Mesh::~Mesh() {    // Cleanup OpenGL objects    glDeleteVertexArrays(1, &VAO);    glDeleteBuffers(1, &VBO);    glDeleteBuffers(1, &EBO);    glDeleteProgram(shaderProgram);}void Mesh::setupMesh() {    // Create buffers/arrays    glGenVertexArrays(1, &VAO);    glGenBuffers(1, &VBO);    glGenBuffers(1, &EBO);        glBindVertexArray(VAO);        // Load vertices into VBO    glBindBuffer(GL_ARRAY_BUFFER, VBO);    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(MeshVertex), &vertices[0], GL_STATIC_DRAW);        // Load indices into EBO    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STATIC_DRAW);        // Set vertex attribute pointers    // Position    glEnableVertexAttribArray(0);    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(MeshVertex), (void*)0);        // Normal    glEnableVertexAttribArray(1);    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(MeshVertex), (void*)offsetof(MeshVertex, normal));        // Color    glEnableVertexAttribArray(2);    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, sizeof(MeshVertex), (void*)offsetof(MeshVertex, color));        glBindVertexArray(0);}void Mesh::setupShaders() {    // Read shader sources    std::string vertexShaderSource = readFile(vertexShaderPath);    std::string fragmentShaderSource = readFile(fragmentShaderPath);        const char* vShaderCode = vertexShaderSource.c_str();    const char* fShaderCode = fragmentShaderSource.c_str();        // Compile shaders    GLuint vertex, fragment;    int success;    char infoLog[512];        // Vertex shader    vertex = glCreateShader(GL_VERTEX_SHADER);    glShaderSource(vertex, 1, &vShaderCode, NULL);    glCompileShader(vertex);        glGetShaderiv(vertex, GL_COMPILE_STATUS, &success);    if (!success) {        glGetShaderInfoLog(vertex, 512, NULL, infoLog);        std::cerr << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;    }        // Fragment shader    fragment = glCreateShader(GL_FRAGMENT_SHADER);    glShaderSource(fragment, 1, &fShaderCode, NULL);    glCompileShader(fragment);        glGetShaderiv(fragment, GL_COMPILE_STATUS, &success);    if (!success) {        glGetShaderInfoLog(fragment, 512, NULL, infoLog);        std::cerr << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;    }        // Shader program    shaderProgram = glCreateProgram();    glAttachShader(shaderProgram, vertex);    glAttachShader(shaderProgram, fragment);    glLinkProgram(shaderProgram);        glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);    if (!success) {        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);        std::cerr << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;    }        // Delete the shaders after linking    glDeleteShader(vertex);    glDeleteShader(fragment);}void Mesh::updateModelMatrix() {    modelMatrix = glm::mat4(1.0f);    modelMatrix = glm::translate(modelMatrix, position);    modelMatrix = glm::rotate(modelMatrix, glm::radians(rotation.x), glm::vec3(1.0f, 0.0f, 0.0f));    modelMatrix = glm::rotate(modelMatrix, glm::radians(rotation.y), glm::vec3(0.0f, 1.0f, 0.0f));    modelMatrix = glm::rotate(modelMatrix, glm::radians(rotation.z), glm::vec3(0.0f, 0.0f, 1.0f));    modelMatrix = glm::scale(modelMatrix, scale);}void Mesh::update() {    // Could add animation or other updates here}void Mesh::render() {    // Use shader program    glUseProgram(shaderProgram);        // Set uniforms    glm::mat4 view = glm::lookAt(        glm::vec3(camera_pos[0], camera_pos[1], camera_pos[2]),        glm::vec3(camera_pos[0], camera_pos[1], camera_pos[2]) + camera_front,        camera_up    );        glm::mat4 projection = glm::perspective(glm::radians(45.0f),                                            (float)window_width/(float)window_height, 0.1f, 100.0f);        // Set matrices    glUniformMatrix4fv(glGetUniformLocation(shaderProgram, "model"), 1, GL_FALSE, glm::value_ptr(modelMatrix));    glUniformMatrix4fv(glGetUniformLocation(shaderProgram, "view"), 1, GL_FALSE, glm::value_ptr(view));    glUniformMatrix4fv(glGetUniformLocation(shaderProgram, "projection"), 1, GL_FALSE, glm::value_ptr(projection));        // Set basic lighting parameters (assuming shader supports these)    glm::vec3 lightPos(5.0f, 5.0f, 5.0f);    glm::vec3 lightColor(1.0f, 1.0f, 1.0f);    glUniform3fv(glGetUniformLocation(shaderProgram, "lightPos"), 1, glm::value_ptr(lightPos));    glUniform3fv(glGetUniformLocation(shaderProgram, "lightColor"), 1, glm::value_ptr(lightColor));    glUniform3fv(glGetUniformLocation(shaderProgram, "viewPos"), 1, glm::value_ptr(glm::vec3(camera_pos[0], camera_pos[1], camera_pos[2])));        // Draw the mesh    glBindVertexArray(VAO);    glDrawElements(GL_TRIANGLES, indices.size(), GL_UNSIGNED_INT, 0);    glBindVertexArray(0);
    
    // Reset state
    glUseProgram(0);
}